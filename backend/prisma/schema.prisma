generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?
  age         Int?
  fileSource  String? // Location of uploaded file
  email       String   @unique
  password    String   // Store hashed passwords!
  role        Role     @default(USER) // Frontend/user-defined Role
  assignedRole Role     @default(USER) // Role assigned by system
  kycStatus        ApprovalStatus @default(PENDING)

  googleId    String?  @unique // For future OAuth

  approvals Approval[]
  approvedApprovals Approval[] @relation("approvedApprovals")
  rejectedApprovals Approval[] @relation("rejectedApprovals")

  @@map("users")
}

model Approval {
  id            String   @id @default(uuid()) @unique
  createdAt   DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  status        ApprovalStatus @default(PENDING)
  requiredRole  Role?
  approval_type ApprovalTypes
  approvedBy    String? 
  approvedByUser User? @relation("approvedApprovals", fields: [approvedBy], references: [id])
  rejectedBy    String? 
  rejectedByUser User? @relation("rejectedApprovals", fields: [rejectedBy], references: [id])
  @@map("approvals")
}

enum Role {
  SUPER
  ADMIN
  USER

  @@map("roles")
}

enum ApprovalStatus {
  PENDING
  REJECTED
  APPROVED

  @@map("approval_statuses")
}

enum ApprovalTypes {
  KYC
  ROLE
  @@map("approval_types")
}